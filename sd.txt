import tkinter as tk
from tkinter import Canvas, Scrollbar
from PIL import Image, ImageTk
import requests
import json
import io
import time
from datetime import datetime
import os

# === HIER ANPASSEN ===
GITHUB_TOKEN = "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"
LIZENZ_CODE = "3032126"
GITHUB_PRODUCTS_URL = "https://raw.githubusercontent.com/LotosYT/Kasse_Food/main/produkte.json"
GITHUB_LICENSES_URL = "https://raw.githubusercontent.com/LotosYT/Kasse_Food/main/lizenzen.txt"
GITHUB_BILDER_URL = "https://raw.githubusercontent.com/LotosYT/Kasse_Food/main/bilder/"
GITHUB_SALES_URL = "https://api.github.com/repos/LotosYT/Kasse_Food/contents/umsatz.json"   
NAME = "Kasse by L400"
# =====================

KAT_ICONS = {
    "Getr√§nke": "ü•§",
    "Wurst": "üå≠",
    "Snacks": "üç´",
    "Sonstiges": "üõí"
}

class KassensystemApp:
    def __init__(self, root):
        self.root = root
        self.root.title(NAME)
        self.root.configure(bg="#f8f8f8")
        self.products = []
        self.cart = []
        self.kategorien = []
        self.aktuelle_kategorie = None
        self.bilder_cache = {}
        self.muelleimer_img = self.get_muelleimer_img()
        self.kassen_id = self.lade_kassen_id()
        self.setup_layout()
        self.check_license()

    def lade_kassen_id(self):
        config_path = "kassen_config.json"
        if os.path.exists(config_path):
            try:
                with open(config_path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    return data.get("kassen_id", "")
            except Exception:
                return ""
        return ""

    def speichere_kassen_id(self, kassen_id):
        config_path = "kassen_config.json"
        try:
            with open(config_path, "w", encoding="utf-8") as f:
                json.dump({"kassen_id": kassen_id}, f, ensure_ascii=False, indent=2)
            self.kassen_id = kassen_id
        except Exception as e:
            self.show_error(f"Fehler beim Speichern der Kassen-ID: {e}")

    def get_muelleimer_img(self):
        try:
            url = GITHUB_BILDER_URL + "muelleimer.png"
            resp = requests.get(url)
            if resp.status_code == 200:
                img = Image.open(io.BytesIO(resp.content)).resize((32, 32))
                return ImageTk.PhotoImage(img)
        except Exception:
            pass
        return None

    def setup_layout(self):
        self.left_frame = tk.Frame(self.root, bg="#f8f8f8", width=220)
        self.left_frame.grid(row=0, column=0, sticky="nswe")
        self.center_frame = tk.Frame(self.root, bg="#ffffff")
        self.center_frame.grid(row=0, column=1, sticky="nswe")
        self.right_frame = tk.Frame(self.root, bg="#f4f4f4", width=400)
        self.right_frame.grid(row=0, column=2, sticky="nswe")
        self.root.grid_columnconfigure(1, weight=1)
        self.root.grid_rowconfigure(0, weight=1)
        self.center_frame.grid_rowconfigure(0, weight=0)  # √úberschrift bleibt klein
        self.center_frame.grid_rowconfigure(1, weight=1)  # Canvas nimmt alles √ºbrige
        self.center_frame.grid_columnconfigure(0, weight=1)
        self.center_frame.grid_columnconfigure(1, weight=0)

    def check_license(self):
        code = LIZENZ_CODE.strip()
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        try:
            print("DEBUG: Lizenz-URL:", GITHUB_LICENSES_URL)
            resp = requests.get(GITHUB_LICENSES_URL, headers=headers)
            print("DEBUG: Lizenz-Status:", resp.status_code)
            print("DEBUG: Lizenz-Text:", repr(resp.text))
            if resp.status_code == 200:
                valid_licenses = [l.strip() for l in resp.text.splitlines() if l.strip()]
                print("DEBUG: Valid Licenses:", valid_licenses)
                if code in valid_licenses:
                    self.load_products()
                else:
                    self.show_error("Ung√ºltiger Lizenzcode.")
            else:
                self.show_error("Fehler beim Laden der Lizenzdaten.")
        except Exception as e:
            self.show_error(f"Fehler: {e}")

    def show_error(self, msg):
        error_win = tk.Toplevel(self.root)
        error_win.title("Fehler")
        error_win.geometry("500x250")
        error_win.configure(bg="#fff")
        tk.Label(error_win, text=msg, font=("Arial", 18, "bold"), fg="#b71c1c", bg="#fff").pack(expand=True)
        tk.Button(error_win, text="Schlie√üen", font=("Arial", 16), command=self.root.destroy, bg="#e57373", fg="#fff", relief="groove", bd=2).pack(pady=20)

    def load_products(self):
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        try:
            resp = requests.get(GITHUB_PRODUCTS_URL, headers=headers)
            if resp.status_code == 200:
                self.products = json.loads(resp.text)
                kategorien = sorted(list(set([p.get("kategorie", "Sonstiges") for p in self.products])))
                self.kategorien = ["Alle"] + kategorien
                self.aktuelle_kategorie = self.kategorien[0] if self.kategorien else None
                self.show_kategorien()
                self.show_produkte()
                self.show_warenkorb()
            else:
                self.show_error("Fehler beim Laden der Produkte.")
        except Exception as e:
            self.show_error(f"Fehler: {e}")

    def show_kategorien(self):
        for widget in self.left_frame.winfo_children():
            widget.destroy()
        # Kassen-ID oben anzeigen
        tk.Label(self.left_frame, text=f"Kassen-ID: {self.kassen_id or '-'}", bg="#f8f8f8", font=("Arial", 14, "bold"), fg="#1976d2").pack(pady=(10,2))
        tk.Label(self.left_frame, text="Kategorien", bg="#f8f8f8", font=("Arial", 20, "bold")).pack(pady=(10,10))
        for kat in self.kategorien:
            icon = KAT_ICONS.get(kat, KAT_ICONS.get("Sonstiges", "üõí"))
            btn = tk.Button(
                self.left_frame, text=f"{icon} {kat}",
                bg="#e0e0e0" if kat != self.aktuelle_kategorie else "#c0e0ff",
                fg="#222", font=("Arial", 18, "bold"), relief="groove", bd=2,
                height=2, width=14,
                activebackground="#b3e5fc", activeforeground="#222",
                command=lambda k=kat: self.kategorie_wechseln(k)
            )
            btn.pack(fill='x', padx=18, pady=8)
        # Einstellungsbutton ganz unten
        tk.Button(self.left_frame, text="‚öôÔ∏è Einstellungen", font=("Arial", 16, "bold"), bg="#bdbdbd", fg="#222", relief="raised", bd=2, command=self.open_settings_pin).pack(side="bottom", fill='x', padx=18, pady=18)

    def kategorie_wechseln(self, kategorie):
        self.aktuelle_kategorie = kategorie
        self.show_kategorien()
        self.show_produkte()

    def show_produkte(self):
        for widget in self.center_frame.winfo_children():
            widget.destroy()

        # √úberschrift
        label = tk.Label(self.center_frame, text=f"Kategorie: {self.aktuelle_kategorie}", bg="#ffffff", font=("Arial", 22, "bold"))
        label.grid(row=0, column=0, columnspan=2, pady=(20,10), sticky="nwe")

        # Canvas f√ºr Produkte
        canvas = Canvas(self.center_frame, bg="#ffffff", highlightthickness=0)
        canvas.grid(row=1, column=0, sticky="nsew")
        scrollbar = Scrollbar(self.center_frame, orient="vertical", command=canvas.yview)
        scrollbar.grid(row=1, column=1, sticky="ns")
        scroll_frame = tk.Frame(canvas, bg="#ffffff")
        scroll_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        canvas.create_window((0, 0), window=scroll_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # Grid-Konfiguration f√ºr Spalten
        col_count = 3
        for col in range(col_count):
            scroll_frame.grid_columnconfigure(col, weight=1)

        if self.aktuelle_kategorie == "Alle":
            produkte = self.products
        else:
            produkte = [p for p in self.products if p.get("kategorie", "Sonstiges") == self.aktuelle_kategorie]
        # Produkte als Grid (3 Spalten)
        for idx, product in enumerate(produkte):
            farbe = product.get("farbe", "#f0f6ff")
            row_idx = idx // col_count
            col_idx = idx % col_count
            frame = tk.Frame(scroll_frame, bg="#ffffff", pady=8, highlightbackground="#bdbdbd", highlightthickness=1, bd=0)
            frame.grid(row=row_idx, column=col_idx, padx=18, pady=12, sticky="nsew")
            # Bild oder Icon
            if product.get("bild"):
                img = self.get_product_image(product["bild"])
                if img:
                    bild_label = tk.Label(frame, image=img, bg="#ffffff")
                    bild_label.image = img
                    bild_label.pack(side="top", pady=(0,8))
                else:
                    icon = KAT_ICONS.get(product.get("kategorie", "Sonstiges"), "üõí")
                    tk.Label(frame, text=icon, font=("Arial", 32), bg="#ffffff").pack(side="top", pady=(0,8))
            else:
                icon = KAT_ICONS.get(product.get("kategorie", "Sonstiges"), "üõí")
                tk.Label(frame, text=icon, font=("Arial", 32), bg="#ffffff").pack(side="top", pady=(0,8))
            btn = tk.Button(
                frame, text=f"{product['name']}\n{product['preis']} ‚Ç¨" + (f" (+{product['pfand']}‚Ç¨ Pfand)" if product.get('pfand_aktiv', False) else ''),
                bg=farbe, fg="#222", font=("Arial", 20, "bold"), relief="raised",
                height=3, width=20, bd=3, activebackground="#d0eaff",
                command=lambda p=product: self.add_to_cart(p),
                wraplength=220, justify="center",
                highlightbackground="#90caf9", highlightthickness=2
            )
            btn.pack(side="top", fill='x', expand=True, padx=8)

    def get_product_image(self, bildname):
        if bildname in self.bilder_cache:
            return self.bilder_cache[bildname]
        try:
            url = GITHUB_BILDER_URL + bildname
            resp = requests.get(url)
            if resp.status_code == 200:
                img = Image.open(io.BytesIO(resp.content)).resize((64, 64))
                tk_img = ImageTk.PhotoImage(img)
                self.bilder_cache[bildname] = tk_img
                return tk_img
        except Exception:
            pass
        return None

    def show_warenkorb(self):
        for widget in self.right_frame.winfo_children():
            widget.destroy()
        tk.Label(self.right_frame, text="üõí Warenkorb", bg="#f4f4f4", font=("Arial", 22, "bold")).pack(pady=(20,10))
        total = 0
        for idx, product in enumerate(self.cart):
            preis = product['preis']
            if product.get('pfand_aktiv', False):
                preis += product.get('pfand', 0)
            total += preis
            row = tk.Frame(self.right_frame, bg="#fff", bd=3, relief="ridge", highlightbackground="#bdbdbd", highlightthickness=1)
            row.pack(fill='x', padx=18, pady=12)
            # Bild oder Icon
            if product.get("bild"):
                img = self.get_product_image(product["bild"])
                if img:
                    bild_label = tk.Label(row, image=img, bg="#fff")
                    bild_label.image = img
                    bild_label.pack(side="left", padx=(0,12))
                else:
                    icon = KAT_ICONS.get(product.get("kategorie", "Sonstiges"), "üõí")
                    tk.Label(row, text=icon, font=("Arial", 24), bg="#fff").pack(side="left", padx=(0,12))
            else:
                icon = KAT_ICONS.get(product.get("kategorie", "Sonstiges"), "üõí")
                tk.Label(row, text=icon, font=("Arial", 24), bg="#fff").pack(side="left", padx=(0,12))
            tk.Label(row, text=f"{product['name']}\n{preis:.2f} ‚Ç¨", bg="#fff", anchor="w", font=("Arial", 18, "bold")).pack(side="left", fill='x', expand=True)
            if self.muelleimer_img:
                del_btn = tk.Button(
                    row,
                    image=self.muelleimer_img,
                    bg="#e57373",
                    relief="flat",
                    bd=0,
                    command=lambda i=idx: self.remove_from_cart(i),
                    activebackground="#ffcdd2"
                )
            else:
                del_btn = tk.Button(
                    row,
                    text="üóëÔ∏è",
                    bg="#e57373",
                    fg="#fff",
                    font=("Arial", 28, "bold"),
                    relief="flat",
                    bd=0,
                    command=lambda i=idx: self.remove_from_cart(i),
                    activebackground="#ffcdd2"
                )
            del_btn.pack(side="right", padx=10, pady=10)
        tk.Label(self.right_frame, text=f"Summe: {total:.2f} ‚Ç¨", bg="#f4f4f4", font=("Arial", 20, "bold")).pack(pady=18)
        pay_btn = tk.Button(self.right_frame, text='üü¢ Verkauf abschlie√üen', bg="#43a047", fg="#fff", font=("Arial", 22, "bold"), command=self.open_payment_window, height=2, width=22, relief="raised", bd=4, activebackground="#66bb6a")
        pay_btn.pack(pady=18, ipadx=10, ipady=5)

    def remove_from_cart(self, idx):
        if 0 <= idx < len(self.cart):
            del self.cart[idx]
            self.show_warenkorb()

    def add_to_cart(self, product):
        self.cart.append(product)
        self.show_warenkorb()

    def open_payment_window(self):
        if not self.cart:
            self.show_info("Warenkorb ist leer!")
            return
        PaymentWindow(self)

    def finish_sale(self, gegeben=None, rueck=None):
        # Verkauf speichern in umsatz.json auf GitHub
        if not self.cart:
            return
        headers = {
            "Authorization": f"token {GITHUB_TOKEN}",
            "Accept": "application/vnd.github.v3+json"
        }
        try:
            # Hole aktuelle Ums√§tze
            resp = requests.get(GITHUB_SALES_URL, headers=headers)
            if resp.status_code == 200:
                content = resp.json()
                import base64
                sales_data = json.loads(base64.b64decode(content['content']).decode())
                if not isinstance(sales_data, list):
                    sales_data = []
            else:
                sales_data = []
        except Exception:
            sales_data = []
        # Neuen Verkauf anh√§ngen
        summe = sum(p['preis'] + (p.get('pfand', 0) if p.get('pfand_aktiv', False) else 0) for p in self.cart)
        sales_data.append({
            "zeit": datetime.now().isoformat(),
            "produkte": [p['name'] for p in self.cart],
            "summe": summe,
            "gegeben": gegeben,
            "wechselgeld": rueck,
            "kassen_id": self.kassen_id
        })
        # Schreibe zur√ºck
        try:
            resp = requests.get(GITHUB_SALES_URL, headers=headers)
            sha = resp.json().get('sha', None) if resp.status_code == 200 else None
            data = {
                "message": "Verkauf hinzugef√ºgt",
                "content": base64.b64encode(json.dumps(sales_data, ensure_ascii=False, indent=2).encode()).decode(),
            }
            if sha:
                data["sha"] = sha
            put_resp = requests.put(GITHUB_SALES_URL, headers=headers, json=data)
        except Exception as e:
            print("Fehler beim Speichern des Umsatzes:", e)
        self.cart = []
        self.show_warenkorb()

    def show_info(self, msg):
        info_win = tk.Toplevel(self.root)
        info_win.title("Info")
        info_win.geometry("400x200")
        info_win.configure(bg="#fff")
        tk.Label(info_win, text=msg, font=("Arial", 16, "bold"), fg="#333", bg="#fff").pack(expand=True)
        tk.Button(info_win, text="OK", font=("Arial", 14), command=info_win.destroy, bg="#90caf9", fg="#222").pack(pady=20)

    def open_settings_pin(self):
        PinWindow(self)

    def open_settings_window(self):
        win = tk.Toplevel(self.root)
        win.title("Einstellungen")
        win.geometry("500x350")
        win.configure(bg="#f8f8f8")
        tk.Label(win, text="Einstellungen", font=("Arial", 24, "bold"), bg="#f8f8f8").pack(pady=18)
        # Kassen-ID
        tk.Label(win, text="Kassen-ID:", font=("Arial", 18), bg="#f8f8f8").pack(pady=(18,4))
        kassenid_var = tk.StringVar(value=self.kassen_id)
        entry = tk.Entry(win, textvariable=kassenid_var, font=("Arial", 18), width=18, justify="center")
        entry.pack(pady=8)
        def speichern():
            self.speichere_kassen_id(kassenid_var.get())
            win.destroy()
            self.show_info("Kassen-ID gespeichert.")
        tk.Button(win, text="Speichern", font=("Arial", 16, "bold"), bg="#43a047", fg="#fff", command=speichern).pack(pady=18)
        tk.Button(win, text="Schlie√üen", font=("Arial", 14), command=win.destroy, bg="#bdbdbd", fg="#222").pack(pady=8)

class PaymentWindow:
    def __init__(self, app):
        self.app = app
        self.win = tk.Toplevel(app.root)
        self.win.title("Zahlung")
        self.win.state('zoomed')  # Maximiert starten
        self.win.configure(bg="#f8f8f8")
        self.input_var = tk.StringVar()
        self.last_input_time = time.time()
        self.change_label = None
        self.gegeben = None
        self.rueck = None
        self.create_widgets()
        self.update_change_later()

    def create_widgets(self):
        summe = sum(p['preis'] + (p.get('pfand', 0) if p.get('pfand_aktiv', False) else 0) for p in self.app.cart)
        tk.Label(self.win, text=f"Summe: {summe:.2f} ‚Ç¨", font=("Arial", 48, "bold"), bg="#f8f8f8").pack(pady=38)
        self.input_display = tk.Label(self.win, textvariable=self.input_var, font=("Arial", 56, "bold"), bg="#fff", width=18, relief="sunken", bd=3)
        self.input_display.pack(pady=24)
        self.change_label = tk.Label(self.win, text="", font=("Arial", 44, "bold"), bg="#f8f8f8", fg="#388e3c")
        self.change_label.pack(pady=24)
        keypad = tk.Frame(self.win, bg="#f8f8f8")
        keypad.pack(pady=24)
        btns = [
            ['7', '8', '9'],
            ['4', '5', '6'],
            ['1', '2', '3'],
            [',', '0', '‚å´'],
            ['Enter']
        ]
        for r, row in enumerate(btns):
            rowf = tk.Frame(keypad, bg="#f8f8f8")
            rowf.pack()
            for c, val in enumerate(row):
                if val == 'Enter':
                    btn = tk.Button(rowf, text=val + ' ‚úÖ', font=("Arial", 28, "bold"), bg="#43a047", fg="#fff", width=10, height=1, command=self.finish, relief="raised", bd=4, activebackground="#66bb6a")
                    btn.pack(side="left", padx=10, pady=10)
                else:
                    btn = tk.Button(rowf, text=val, font=("Arial", 28, "bold"), bg="#e0e0e0", fg="#222", width=5, height=1, command=lambda v=val: self.key_press(v), relief="raised", bd=3, activebackground="#b3e5fc")
                    btn.pack(side="left", padx=10, pady=10)

    def key_press(self, val):
        self.last_input_time = time.time()
        if val == '‚å´':
            self.input_var.set(self.input_var.get()[:-1])
        elif val == ',':
            if ',' not in self.input_var.get():
                self.input_var.set(self.input_var.get() + ',')
        else:
            self.input_var.set(self.input_var.get() + val)
        self.update_change()

    def update_change(self):
        summe = sum(p['preis'] + (p.get('pfand', 0) if p.get('pfand_aktiv', False) else 0) for p in self.app.cart)
        try:
            gegeben = float(self.input_var.get().replace(",", ".")) if self.input_var.get() else 0
            rueck = gegeben - summe
            self.gegeben = gegeben
            self.rueck = rueck
            if gegeben > 0:
                self.change_label.config(text=f"Wechselgeld: {rueck:.2f} ‚Ç¨")
            else:
                self.change_label.config(text="")
        except Exception:
            self.change_label.config(text="")

    def update_change_later(self):
        if time.time() - self.last_input_time > 2:
            self.update_change()
        self.win.after(500, self.update_change_later)

    def finish(self):
        self.app.finish_sale(self.gegeben, self.rueck)
        self.win.destroy()

class PinWindow:
    def __init__(self, app):
        self.app = app
        self.win = tk.Toplevel(app.root)
        self.win.title("PIN f√ºr Einstellungen")
        self.win.geometry("900x900")
        self.input_var = tk.StringVar()
        self.create_widgets()

    def create_widgets(self):
        tk.Label(self.win, text="PIN eingeben", font=("Arial", 38, "bold"), bg="#f8f8f8").pack(pady=38)
        self.input_display = tk.Label(self.win, textvariable=self.input_var, font=("Arial", 48, "bold"), bg="#fff", width=12, relief="sunken", bd=3)
        self.input_display.pack(pady=28)
        keypad = tk.Frame(self.win, bg="#f8f8f8")
        keypad.pack(pady=28)
        btns = [
            ['7', '8', '9'],
            ['4', '5', '6'],
            ['1', '2', '3'],
            [',', '0', '‚å´'],
            ['Enter']
        ]
        for r, row in enumerate(btns):
            rowf = tk.Frame(keypad, bg="#f8f8f8")
            rowf.pack()
            for c, val in enumerate(row):
                if val == 'Enter':
                    btn = tk.Button(rowf, text=val + ' ‚úÖ', font=("Arial", 28, "bold"), bg="#43a047", fg="#fff", width=8, height=1, command=self.check_pin, relief="raised", bd=4, activebackground="#66bb6a")
                    btn.pack(side="left", padx=8, pady=8)
                else:
                    btn = tk.Button(rowf, text=val, font=("Arial", 28, "bold"), bg="#e0e0e0", fg="#222", width=4, height=1, command=lambda v=val: self.key_press(v), relief="raised", bd=3, activebackground="#b3e5fc")
                    btn.pack(side="left", padx=8, pady=8)

    def key_press(self, val):
        if val == '‚å´':
            self.input_var.set(self.input_var.get()[:-1])
        elif val == ',':
            pass  # Komma ignorieren f√ºr PIN
        else:
            self.input_var.set(self.input_var.get() + val)

    def check_pin(self):
        if self.input_var.get() == '2':
            self.win.destroy()
            self.app.open_settings_window()
        else:
            self.input_var.set("")
            self.input_display.config(bg="#ffcdd2")
            self.win.after(500, lambda: self.input_display.config(bg="#fff"))

if __name__ == '__main__':
    try:
        from PIL import Image, ImageTk
    except ImportError:
        import sys
        sys.exit("Bitte installiere Pillow: pip install pillow")
    root = tk.Tk()
    try:
        root.state('zoomed')  # Windows
    except:
        root.attributes('-zoomed', True)  # Linux
    root.grid_columnconfigure(0, weight=0)
    root.grid_columnconfigure(1, weight=1)
    root.grid_columnconfigure(2, weight=0)
    root.grid_rowconfigure(0, weight=1)
    app = KassensystemApp(root)
    root.mainloop() 
